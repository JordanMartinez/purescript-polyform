module Polyform.Input.Foreign where

-- import Prelude
-- 
-- import Control.Monad.Except (runExcept)
-- import Data.Array as Array
-- import Data.Bifunctor as Bifunctor
-- import Data.Either (Either(..))
-- import Data.Foldable (fold)
-- import Data.Foreign (Foreign, MultipleErrors, readArray, readInt, readString)
-- import Data.Foreign.Index (class Index, (!))
-- import Data.Monoid (class Monoid)
-- import Data.Traversable (traverse)
-- import Data.Variant (Variant, inj)
-- import Polyform.Field as Field
-- import Polyform.Form.Component as Form.Component
-- import Polyform.Form.Validation (V(..))
-- import Polyform.Form.Validation as Form
-- import Type.Prelude (SProxy(..))
-- 
-- type ForeignErr err = (index ∷ MultipleErrors, value ∷ MultipleErrors | err)
-- 
-- type Field attrs index err value =
--   Field.Input attrs index (Variant (ForeignErr err)) value
-- 
-- type IntField attrs index err = Field attrs index err Int
-- type StringField attrs index err = Field attrs index err String
-- type NumberField attrs index err = Field attrs index err Number
-- type ArrayField attrs index err val = Field attrs index err (Array val)
-- 
-- arrayValidation
--   ∷ ∀ m err err' v
--   . Monad m
--   ⇒ Monoid err
--   ⇒ Form.Validation m err Foreign v
--   → Field.Validation m (Variant (array ∷ MultipleErrors, values ∷ err | err')) Foreign (Array v)
-- arrayValidation v =
--   arrV >>> fieldsV
--  where
--   arrV = hoistFnEither (readArray >>> runExcept >>> Bifunctor.lmap (inj (SProxy ∷ SProxy "array")))
--   fieldsV = hoistFnMEither $ \arr → do
--     arr' ← traverse ((map Array.singleton <$> _) <<< Form.runValidation v) arr
--     pure $ case fold arr' of
--       Valid _ r → Right r
--       Invalid e → Left (inj (SProxy ∷ SProxy "values") e)
-- 
-- intValidation
--   ∷ ∀ m err
--   . Monad m
--   ⇒ Field.Validation m (Variant (value ∷ MultipleErrors | err)) Foreign Int
-- intValidation =
--   Field.hoistFnEither (readInt >>> runExcept >>> Bifunctor.lmap (inj (SProxy ∷ SProxy "value")))
-- 
-- stringValidation
--   ∷ ∀ m err
--   . Monad m
--   ⇒ Field.Validation m (Variant (value ∷ MultipleErrors | err)) Foreign String
-- stringValidation =
--   Field.hoistFnEither (readString >>> runExcept >>> Bifunctor.lmap (inj (SProxy ∷ SProxy "value")))
-- 
-- fromFieldCoerce
--   ∷ ∀ attrs err form index m value value'
--   . Index index
--   ⇒ Monad m
--   ⇒ (value → value')
--   → (Field attrs index err value -> form)
--   → (Field attrs index err value)
--   → Field.Validation m (Variant (ForeignErr err)) Foreign value
--   → Form.Component.Component m form Foreign value'
-- fromFieldCoerce coerce singleton field validation =
--   Form.Component.fromFieldCoerce coerce singleton field (index >>> validation)
--  where
--   index = Field.hoistFnEither $ \v →
--     Bifunctor.lmap (inj (SProxy ∷ SProxy "index")) (runExcept (v ! field.name))
-- 
-- fromField
--   ∷ ∀ attrs err form index m value
--   . Index index
--   ⇒ Monad m
--   ⇒ (Field attrs index err value -> form)
--   → (Field attrs index err value)
--   → Field.Validation m (Variant (ForeignErr err)) Foreign value
--   → Form.Component.Component m form Foreign value
-- fromField = fromFieldCoerce id
